version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.7.0
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  build-and-test:
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: install dependencies and test
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pipenv install
            sudo pip install pytest
            pytest
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            sudo pipenv lock -r -d > requirements.txt
            sudo pip install --target ./lib_src -r requirements.txt
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - project
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      stage:
        type: string
      help_request_api_url:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: format get and init
          command: |
            cd infrastructure/<<parameters.stage>>
            terraform fmt
            terraform get -update=true
            terraform init
      - run:
          name: apply
          command: |
            cd infrastructure/<<parameters.stage>>
            terraform apply -var api_url=<<parameters.help_request_api_url>> -auto-approve

jobs:
  build-and-test:
    executor: docker-python
    steps:
      - build-and-test
  deploy-development:
    executor: docker-terraform
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
      - terraform-init-then-apply:
          stage: "development"
          help_request_api_url: $HELP_REQUEST_API_URL_DEVELOPEMENT
  deploy-staging:
    executor: docker-terraform
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
      - terraform-init-then-apply:
          stage: "staging"
          help_request_api_url: $HELP_REQUEST_API_URL_STAGINING
  deploy-production:
    executor: docker-terraform
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
      - terraform-init-then-apply:
          stage: "production"
          help_request_api_url: $HELP_REQUEST_API_URL_PRODUCTION

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build-and-test
      - deploy-development:
          context: api-assume-role-development-context
          requires:
            - build-and-test
          filters:
            branches:
              only: development
      - deploy-staging:
          context: api-assume-role-staging-context
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - permit-production-release:
          type: approval
          requires:
            - deploy-staging
          filters:
            branches:
              only: master
      - deploy-production:
          context: api-assume-role-production-context
          requires:
            - permit-production-release
          filters:
            branches:
              only: master
