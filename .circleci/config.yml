version: 2.1

orbs:
  aws-cli: circleci/aws-cli@1.0.0
  aws_assume_role: lbh-hackit/aws_assume_role@0.1.0

executors:
  docker-python:
    docker:
      - image: circleci/python:3.8
  docker-terraform:
    docker:
      - image: "hashicorp/terraform:light"

references:
  workspace_root: &workspace_root "~"
  attach_workspace: &attach_workspace
    attach_workspace:
      at: *workspace_root

commands:
  build-and-test:
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: install dependencies and test
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pipenv install
            sudo pip install pytest
            pytest
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            sudo pipenv lock --requirements > requirements.txt
            sudo pip install --target ./lib_src -r requirements.txt
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - project
  assume-role-and-persist-workspace:
    description: "Assumes deployment role and persists credentials across jobs"
    parameters:
      aws-account:
        type: string
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - aws_assume_role/assume_role:
          account: <<parameters.aws-account>>
          profile_name: default
          role: "LBH_Circle_CI_Deployment_Role"
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - .aws
  retrieve-key-file-from-ssm:
    description: "Retrieves key file from ssm"
    parameters:
      stage:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: Install AWS CLI
          command: |
            curl -L -o awscliv2.zip "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: Fetch key file from SSM
          command: |
            aws ssm get-parameter --name "/cv-19-res-support-v3/<<parameters.stage>>/gdrive_key" --output text --query Parameter.Value > ./lib_src/lib/key_file.json
      - persist_to_workspace:
          root: *workspace_root
          paths:
            - project/lib_src/lib/key_file.json
  terraform-init-then-apply:
    description: "Initializes and applies terraform configuration"
    parameters:
      stage:
        type: string
      help_request_api_url:
        type: string
    steps:
      - *attach_workspace
      - checkout
      - run:
          name: format get and init
          command: |
            cd infrastructure/<<parameters.stage>>
            terraform fmt
            terraform get -update=true
            terraform init
      - run:
          name: Terrafrom Apply
          command: |
            cd infrastructure/<<parameters.stage>>
            terraform apply -auto-approve -var api_url=<<parameters.help_request_api_url>> 

jobs:
  build-and-test:
    executor: docker-python
    steps:
      - build-and-test
  assume-role-development:
    executor: docker-python
    steps:
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_DEVELOPMENT
          stage: "development"
  retrieve-development-key-file-from-ssm:
    executor: docker-python
    steps:
      - retrieve-key-file-from-ssm:
          stage: "development"
  assume-role-staging:
    executor: docker-python
    steps:
      - run:
          name: unset aws credentials
          command: |
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SECRET_KEY
            unset AWS_SESSION_TOKEN
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_STAGING
          stage: "staging"
  retrieve-staging-key-file-from-ssm:
    executor: docker-python
    steps:
      - retrieve-key-file-from-ssm:
          stage: "staging"
  assume-role-production:
    executor: docker-python
    steps:
      - run:
          name: unset aws credentials
          command: |
            unset AWS_SECRET_ACCESS_KEY
            unset AWS_SECRET_KEY
            unset AWS_SESSION_TOKEN
      - assume-role-and-persist-workspace:
          aws-account: $AWS_ACCOUNT_PRODUCTION
          stage: "production"
  retrieve-production-key-file-from-ssm:
    executor: docker-python
    steps:
      - retrieve-key-file-from-ssm:
          stage: "production"
  terraform-init-and-apply-to-development:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          stage: "development"
          help_request_api_url: $HELP_REQUEST_API_URL_DEVELOPEMENT
  terraform-init-and-apply-to-staging:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          stage: "staging"
          help_request_api_url: $HELP_REQUEST_API_URL_DEVELOPEMENT
  terraform-init-and-apply-to-production:
    executor: docker-terraform
    steps:
      - terraform-init-then-apply:
          stage: "production"
          help_request_api_url: $HELP_REQUEST_API_URL_PRODUCTION

workflows:
  version: 2
  continuous-delivery:
    jobs:
      - build-and-test
      - assume-role-staging:
          context: api-assume-role-staging-context
          filters:
            branches:
              only: master
          requires:
            - build-and-test
      - retrieve-staging-key-file-from-ssm:
          requires:
            - assume-role-staging
      - terraform-init-and-apply-to-staging:
          requires:
            - retrieve-staging-key-file-from-ssm
          filters:
            branches:
              only: master
  deploy-production:
    jobs:
      - build-and-test
      - permit-production-release:
          type: approval
          requires:
            - build-and-test
          filters:
            branches:
              only: master
      - assume-role-production:
          context: api-assume-role-production-context
          requires:
            - permit-production-release
          filters:
            branches:
              only: master
      - retrieve-production-key-file-from-ssm:
          requires:
            - assume-role-production
      - terraform-init-and-apply-to-production:
          requires:
            - retrieve-production-key-file-from-ssm
          filters:
            branches:
              only: master
  check-and-deploy-development:
    jobs:
      - build-and-test:
          filters:
            branches:
              only: development
      - assume-role-development:
          requires:
            - build-and-test
          context: api-assume-role-development-context
          filters:
            branches:
              only: development
      - retrieve-development-key-file-from-ssm:
          requires:
            - assume-role-development
          filters:
            branches:
              only: development
      - terraform-init-and-apply-to-development:
          requires:
            - retrieve-development-key-file-from-ssm
          filters:
            branches:
              only: development
